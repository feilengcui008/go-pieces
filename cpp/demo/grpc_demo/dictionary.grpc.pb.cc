// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: dictionary.proto

#include "dictionary.pb.h"
#include "dictionary.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace Tan {

static const char* Dictionary_method_names[] = {
  "/Tan.Dictionary/GetOne",
  "/Tan.Dictionary/SendStreamList",
  "/Tan.Dictionary/GetStreamList",
  "/Tan.Dictionary/StreamList",
};

std::unique_ptr< Dictionary::Stub> Dictionary::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Dictionary::Stub> stub(new Dictionary::Stub(channel));
  return stub;
}

Dictionary::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetOne_(Dictionary_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendStreamList_(Dictionary_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetStreamList_(Dictionary_method_names[2], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_StreamList_(Dictionary_method_names[3], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Dictionary::Stub::GetOne(::grpc::ClientContext* context, const ::Tan::Word& request, ::Tan::Meaning* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetOne_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Tan::Meaning>* Dictionary::Stub::AsyncGetOneRaw(::grpc::ClientContext* context, const ::Tan::Word& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::Tan::Meaning>(channel_.get(), cq, rpcmethod_GetOne_, context, request);
}

::grpc::ClientReader< ::Tan::Meaning>* Dictionary::Stub::SendStreamListRaw(::grpc::ClientContext* context, const ::Tan::Word& request) {
  return new ::grpc::ClientReader< ::Tan::Meaning>(channel_.get(), rpcmethod_SendStreamList_, context, request);
}

::grpc::ClientAsyncReader< ::Tan::Meaning>* Dictionary::Stub::AsyncSendStreamListRaw(::grpc::ClientContext* context, const ::Tan::Word& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::Tan::Meaning>(channel_.get(), cq, rpcmethod_SendStreamList_, context, request, tag);
}

::grpc::ClientWriter< ::Tan::Word>* Dictionary::Stub::GetStreamListRaw(::grpc::ClientContext* context, ::Tan::Meaning* response) {
  return new ::grpc::ClientWriter< ::Tan::Word>(channel_.get(), rpcmethod_GetStreamList_, context, response);
}

::grpc::ClientAsyncWriter< ::Tan::Word>* Dictionary::Stub::AsyncGetStreamListRaw(::grpc::ClientContext* context, ::Tan::Meaning* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::Tan::Word>(channel_.get(), cq, rpcmethod_GetStreamList_, context, response, tag);
}

::grpc::ClientReaderWriter< ::Tan::Word, ::Tan::Meaning>* Dictionary::Stub::StreamListRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::Tan::Word, ::Tan::Meaning>(channel_.get(), rpcmethod_StreamList_, context);
}

::grpc::ClientAsyncReaderWriter< ::Tan::Word, ::Tan::Meaning>* Dictionary::Stub::AsyncStreamListRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::Tan::Word, ::Tan::Meaning>(channel_.get(), cq, rpcmethod_StreamList_, context, tag);
}

Dictionary::Service::Service() {
  (void)Dictionary_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Dictionary_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Dictionary::Service, ::Tan::Word, ::Tan::Meaning>(
          std::mem_fn(&Dictionary::Service::GetOne), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Dictionary_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Dictionary::Service, ::Tan::Word, ::Tan::Meaning>(
          std::mem_fn(&Dictionary::Service::SendStreamList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Dictionary_method_names[2],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Dictionary::Service, ::Tan::Word, ::Tan::Meaning>(
          std::mem_fn(&Dictionary::Service::GetStreamList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Dictionary_method_names[3],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Dictionary::Service, ::Tan::Word, ::Tan::Meaning>(
          std::mem_fn(&Dictionary::Service::StreamList), this)));
}

Dictionary::Service::~Service() {
}

::grpc::Status Dictionary::Service::GetOne(::grpc::ServerContext* context, const ::Tan::Word* request, ::Tan::Meaning* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dictionary::Service::SendStreamList(::grpc::ServerContext* context, const ::Tan::Word* request, ::grpc::ServerWriter< ::Tan::Meaning>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dictionary::Service::GetStreamList(::grpc::ServerContext* context, ::grpc::ServerReader< ::Tan::Word>* reader, ::Tan::Meaning* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dictionary::Service::StreamList(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Tan::Meaning, ::Tan::Word>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Tan

