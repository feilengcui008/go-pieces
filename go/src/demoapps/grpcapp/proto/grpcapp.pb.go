// Code generated by protoc-gen-go.
// source: grpcapp.proto
// DO NOT EDIT!

/*
Package grpcproto is a generated protocol buffer package.

It is generated from these files:
	grpcapp.proto

It has these top-level messages:
	ItemRequest
	ItemDetail
	ItemResponse
	ItemSummary
	OrderRequest
	OrderResponse
*/
package grpcproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ItemRequest struct {
	ItemID string `protobuf:"bytes,1,opt,name=ItemID,json=itemID" json:"ItemID,omitempty"`
}

func (m *ItemRequest) Reset()                    { *m = ItemRequest{} }
func (m *ItemRequest) String() string            { return proto.CompactTextString(m) }
func (*ItemRequest) ProtoMessage()               {}
func (*ItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ItemRequest) GetItemID() string {
	if m != nil {
		return m.ItemID
	}
	return ""
}

type ItemDetail struct {
	ItemID   string `protobuf:"bytes,1,opt,name=ItemID,json=itemID" json:"ItemID,omitempty"`
	ItemName string `protobuf:"bytes,2,opt,name=ItemName,json=itemName" json:"ItemName,omitempty"`
}

func (m *ItemDetail) Reset()                    { *m = ItemDetail{} }
func (m *ItemDetail) String() string            { return proto.CompactTextString(m) }
func (*ItemDetail) ProtoMessage()               {}
func (*ItemDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ItemDetail) GetItemID() string {
	if m != nil {
		return m.ItemID
	}
	return ""
}

func (m *ItemDetail) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

type ItemResponse struct {
	ItemDetail *ItemDetail `protobuf:"bytes,1,opt,name=ItemDetail,json=itemDetail" json:"ItemDetail,omitempty"`
}

func (m *ItemResponse) Reset()                    { *m = ItemResponse{} }
func (m *ItemResponse) String() string            { return proto.CompactTextString(m) }
func (*ItemResponse) ProtoMessage()               {}
func (*ItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ItemResponse) GetItemDetail() *ItemDetail {
	if m != nil {
		return m.ItemDetail
	}
	return nil
}

type ItemSummary struct {
	Count int32 `protobuf:"varint,1,opt,name=Count,json=count" json:"Count,omitempty"`
}

func (m *ItemSummary) Reset()                    { *m = ItemSummary{} }
func (m *ItemSummary) String() string            { return proto.CompactTextString(m) }
func (*ItemSummary) ProtoMessage()               {}
func (*ItemSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ItemSummary) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type OrderRequest struct {
	OrderID string `protobuf:"bytes,1,opt,name=OrderID,json=orderID" json:"OrderID,omitempty"`
}

func (m *OrderRequest) Reset()                    { *m = OrderRequest{} }
func (m *OrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()               {}
func (*OrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OrderRequest) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

type OrderResponse struct {
	OrderID string `protobuf:"bytes,1,opt,name=OrderID,json=orderID" json:"OrderID,omitempty"`
}

func (m *OrderResponse) Reset()                    { *m = OrderResponse{} }
func (m *OrderResponse) String() string            { return proto.CompactTextString(m) }
func (*OrderResponse) ProtoMessage()               {}
func (*OrderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OrderResponse) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func init() {
	proto.RegisterType((*ItemRequest)(nil), "grpcproto.ItemRequest")
	proto.RegisterType((*ItemDetail)(nil), "grpcproto.ItemDetail")
	proto.RegisterType((*ItemResponse)(nil), "grpcproto.ItemResponse")
	proto.RegisterType((*ItemSummary)(nil), "grpcproto.ItemSummary")
	proto.RegisterType((*OrderRequest)(nil), "grpcproto.OrderRequest")
	proto.RegisterType((*OrderResponse)(nil), "grpcproto.OrderResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ItemService service

type ItemServiceClient interface {
	GetItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	GetItemStream(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (ItemService_GetItemStreamClient, error)
	PutItemStream(ctx context.Context, opts ...grpc.CallOption) (ItemService_PutItemStreamClient, error)
	StreamItem(ctx context.Context, opts ...grpc.CallOption) (ItemService_StreamItemClient, error)
}

type itemServiceClient struct {
	cc *grpc.ClientConn
}

func NewItemServiceClient(cc *grpc.ClientConn) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) GetItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := grpc.Invoke(ctx, "/grpcproto.ItemService/GetItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItemStream(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (ItemService_GetItemStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ItemService_serviceDesc.Streams[0], c.cc, "/grpcproto.ItemService/GetItemStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServiceGetItemStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ItemService_GetItemStreamClient interface {
	Recv() (*ItemResponse, error)
	grpc.ClientStream
}

type itemServiceGetItemStreamClient struct {
	grpc.ClientStream
}

func (x *itemServiceGetItemStreamClient) Recv() (*ItemResponse, error) {
	m := new(ItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *itemServiceClient) PutItemStream(ctx context.Context, opts ...grpc.CallOption) (ItemService_PutItemStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ItemService_serviceDesc.Streams[1], c.cc, "/grpcproto.ItemService/PutItemStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServicePutItemStreamClient{stream}
	return x, nil
}

type ItemService_PutItemStreamClient interface {
	Send(*ItemRequest) error
	CloseAndRecv() (*ItemSummary, error)
	grpc.ClientStream
}

type itemServicePutItemStreamClient struct {
	grpc.ClientStream
}

func (x *itemServicePutItemStreamClient) Send(m *ItemRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *itemServicePutItemStreamClient) CloseAndRecv() (*ItemSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ItemSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *itemServiceClient) StreamItem(ctx context.Context, opts ...grpc.CallOption) (ItemService_StreamItemClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ItemService_serviceDesc.Streams[2], c.cc, "/grpcproto.ItemService/StreamItem", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServiceStreamItemClient{stream}
	return x, nil
}

type ItemService_StreamItemClient interface {
	Send(*ItemRequest) error
	Recv() (*ItemResponse, error)
	grpc.ClientStream
}

type itemServiceStreamItemClient struct {
	grpc.ClientStream
}

func (x *itemServiceStreamItemClient) Send(m *ItemRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *itemServiceStreamItemClient) Recv() (*ItemResponse, error) {
	m := new(ItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ItemService service

type ItemServiceServer interface {
	GetItem(context.Context, *ItemRequest) (*ItemResponse, error)
	GetItemStream(*ItemRequest, ItemService_GetItemStreamServer) error
	PutItemStream(ItemService_PutItemStreamServer) error
	StreamItem(ItemService_StreamItemServer) error
}

func RegisterItemServiceServer(s *grpc.Server, srv ItemServiceServer) {
	s.RegisterService(&_ItemService_serviceDesc, srv)
}

func _ItemService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcproto.ItemService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItemStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ItemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ItemServiceServer).GetItemStream(m, &itemServiceGetItemStreamServer{stream})
}

type ItemService_GetItemStreamServer interface {
	Send(*ItemResponse) error
	grpc.ServerStream
}

type itemServiceGetItemStreamServer struct {
	grpc.ServerStream
}

func (x *itemServiceGetItemStreamServer) Send(m *ItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ItemService_PutItemStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ItemServiceServer).PutItemStream(&itemServicePutItemStreamServer{stream})
}

type ItemService_PutItemStreamServer interface {
	SendAndClose(*ItemSummary) error
	Recv() (*ItemRequest, error)
	grpc.ServerStream
}

type itemServicePutItemStreamServer struct {
	grpc.ServerStream
}

func (x *itemServicePutItemStreamServer) SendAndClose(m *ItemSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *itemServicePutItemStreamServer) Recv() (*ItemRequest, error) {
	m := new(ItemRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ItemService_StreamItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ItemServiceServer).StreamItem(&itemServiceStreamItemServer{stream})
}

type ItemService_StreamItemServer interface {
	Send(*ItemResponse) error
	Recv() (*ItemRequest, error)
	grpc.ServerStream
}

type itemServiceStreamItemServer struct {
	grpc.ServerStream
}

func (x *itemServiceStreamItemServer) Send(m *ItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *itemServiceStreamItemServer) Recv() (*ItemRequest, error) {
	m := new(ItemRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ItemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcproto.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ItemService_GetItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItemStream",
			Handler:       _ItemService_GetItemStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutItemStream",
			Handler:       _ItemService_PutItemStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamItem",
			Handler:       _ItemService_StreamItem_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcapp.proto",
}

// Client API for OrderService service

type OrderServiceClient interface {
	GetOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := grpc.Invoke(ctx, "/grpcproto.OrderService/GetOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceServer interface {
	GetOrder(context.Context, *OrderRequest) (*OrderResponse, error)
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcproto.OrderService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcproto.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _OrderService_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcapp.proto",
}

func init() { proto.RegisterFile("grpcapp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x6d, 0x0a, 0xf9, 0xe8, 0xb4, 0xb9, 0x0c, 0x5a, 0x43, 0x4e, 0xb2, 0x22, 0xc4, 0x4b, 0x28,
	0x11, 0x6f, 0x82, 0x42, 0x23, 0xa5, 0x17, 0x2b, 0xe9, 0x2f, 0x88, 0x71, 0x90, 0x80, 0x69, 0xe2,
	0x66, 0x23, 0xf8, 0x5b, 0xfc, 0xb3, 0xb2, 0x9b, 0x4d, 0x0c, 0x2d, 0x05, 0xe9, 0x6d, 0xdf, 0x9b,
	0x99, 0xf7, 0xde, 0xcc, 0x82, 0xfb, 0xce, 0xab, 0x2c, 0xad, 0xaa, 0xb0, 0xe2, 0xa5, 0x28, 0x71,
	0x22, 0xa1, 0x7a, 0xb2, 0x6b, 0x98, 0xae, 0x05, 0x15, 0x09, 0x7d, 0x36, 0x54, 0x0b, 0x9c, 0x83,
	0x25, 0xe1, 0x3a, 0xf6, 0x8c, 0x4b, 0x23, 0x98, 0x24, 0x56, 0xae, 0x10, 0x7b, 0x04, 0x90, 0x7c,
	0x4c, 0x22, 0xcd, 0x3f, 0x8e, 0x75, 0xa1, 0x0f, 0x8e, 0xe4, 0x9f, 0xd3, 0x82, 0xbc, 0xb1, 0xaa,
	0x38, 0xb9, 0xc6, 0xec, 0x09, 0x66, 0xad, 0x51, 0x5d, 0x95, 0xbb, 0x9a, 0xf0, 0x6e, 0xa8, 0xa8,
	0x74, 0xa6, 0xd1, 0x79, 0xd8, 0x07, 0x0b, 0xff, 0x8a, 0x09, 0xe4, 0xfd, 0x9b, 0x5d, 0xb5, 0x79,
	0xb7, 0x4d, 0x51, 0xa4, 0xfc, 0x1b, 0xcf, 0xc0, 0x5c, 0x96, 0xcd, 0x4e, 0x28, 0x01, 0x33, 0x31,
	0x33, 0x09, 0x58, 0x00, 0xb3, 0x0d, 0x7f, 0x23, 0xde, 0x6d, 0xe5, 0x81, 0xad, 0x70, 0x1f, 0xd8,
	0x2e, 0x5b, 0xc8, 0x6e, 0xc0, 0xd5, 0x9d, 0x3a, 0xd6, 0xd1, 0xd6, 0xe8, 0x67, 0xac, 0xad, 0x89,
	0x7f, 0xe5, 0x19, 0xe1, 0x3d, 0xd8, 0x2b, 0x12, 0x92, 0xc1, 0xf9, 0x5e, 0x6e, 0xed, 0xeb, 0x5f,
	0x1c, 0xf0, 0xad, 0x0b, 0x1b, 0x61, 0x0c, 0xae, 0x9e, 0xde, 0x0a, 0x4e, 0xe9, 0x29, 0x1a, 0x0b,
	0x03, 0x97, 0xe0, 0xbe, 0x34, 0xff, 0x51, 0xd9, 0xe7, 0xf5, 0xfd, 0xd8, 0x28, 0x90, 0x22, 0xd0,
	0x4e, 0x9f, 0xb8, 0x4b, 0x60, 0x2c, 0x8c, 0x68, 0xa3, 0x4f, 0xde, 0x5d, 0xe7, 0x01, 0x9c, 0x15,
	0x09, 0x45, 0xe1, 0x70, 0x74, 0xf8, 0x2f, 0xbe, 0x77, 0x58, 0xe8, 0x44, 0x5f, 0x2d, 0x45, 0xdf,
	0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xbd, 0xc1, 0x35, 0xbb, 0x02, 0x00, 0x00,
}
